generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
  output          = "./__generated__"
  binaryTargets   = ["native", "debian-openssl-3.0.x"]
}

/// Always after the prisma-client-js generator
generator json {
  provider = "prisma-json-types-generator"
  // namespace = "PrismaJson"
  // clientOutput = "<finds it automatically>"
  // (./ -> relative to schema, or an importable path to require() it)
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Settings {
  id         Int     @id @default(autoincrement())
  /// [Settings]
  settings   Json
  publicKey  String? // Used for ActivityPub
  privateKey String? // Used for ActivityPub
}

model Client {
  id                 Int       @id @default(autoincrement())
  applicationName    String
  applicationUrl     String
  allowedCorsOrigins String[]
  secret             String?
  key                String?
  updatedAt          DateTime  @default(now()) @updatedAt
  createdAt          DateTime  @default(now())
  deletedAt          DateTime?
}

model User {
  id                                  Int                             @id @default(autoincrement())
  email                               String                          @unique
  name                                String?
  password                            String                          @default("")
  refresh                             String?
  artists                             Artist[]
  createdAt                           DateTime                        @default(now())
  updatedAt                           DateTime                        @default(now()) @updatedAt
  deletedAt                           DateTime?
  isAdmin                             Boolean                         @default(false)
  artistUserSubscriptions             ArtistUserSubscription[]
  countryCode                         String?
  currency                            String?
  userTrackGroupPurchases             UserTrackGroupPurchase[]
  emailConfirmationToken              String?                         @default(uuid()) @db.Uuid
  emailConfirmationExpiration         DateTime?                       @default(dbgenerated("(NOW() + '00:20:00'::interval)"))
  passwordResetConfirmationToken      String?
  passwordResetConfirmationExpiration DateTime?
  stripeAccountId                     String?
  receiveMailingList                  Boolean                         @default(false)
  wishlist                            UserTrackGroupWishlist[]
  plays                               TrackPlay[]
  downloadCodes                       TrackGroupDownloadCodes[]
  userArtistNotificationSettings      UserArtistNotificationSetting[]
  receivingNotifications              Notification[]                  @relation("receivingUser")
  relatedNotifications                Notification[]                  @relation("relatedUser")
  language                            String?
  userArtistTip                       UserArtistTip[]
  merchPurchase                       MerchPurchase[]
  promoCodes                          String[]
  receivePlatformEmails               Boolean                         @default(true)
  paymentTrackGroups                  TrackGroup[]
  isLabelAccount                      Boolean                         @default(false)
  artistLabels                        ArtistLabel[]
}

model UserArtistNotificationSetting {
  userId       Int
  user         User             @relation(fields: [userId], references: [id])
  notification NotificationType
  isEnabled    Boolean          @default(true)
  artistId     Int
  artist       Artist           @relation(fields: [artistId], references: [id])

  @@unique([userId, notification])
}

model ActivityPubArtistFollowers {
  artistId Int
  artist   Artist @relation(fields: [artistId], references: [id])
  actor    String

  @@unique([actor, artistId])
}

model Notification {
  id               String                  @id @default(uuid())
  isRead           Boolean                 @default(false)
  userId           Int
  user             User                    @relation(fields: [userId], references: [id], name: "receivingUser")
  notificationType NotificationType
  createdAt        DateTime                @default(now())
  content          String?
  trackGroupId     Int?
  trackGroup       TrackGroup?             @relation(fields: [trackGroupId], references: [id])
  subscriptionId   Int?
  subscription     ArtistUserSubscription? @relation(fields: [subscriptionId], references: [id])
  postId           Int?
  post             Post?                   @relation(fields: [postId], references: [id])
  artistId         Int?
  artist           Artist?                 @relation(fields: [artistId], references: [id])
  relatedUserId    Int?
  relatedUser      User?                   @relation(fields: [relatedUserId], references: [id], name: "relatedUser")
}

enum NotificationType {
  NEW_ARTIST_MONTHLY_SUBSCRIPTION
  NEW_ARTIST_POST
  NEW_ARTIST_ALBUM
  USER_FOLLOWED_YOU
  USER_BOUGHT_YOUR_ALBUM
  USER_SUBSCRIBED_TO_YOU
}

model Post {
  id                        Int                     @id @default(autoincrement())
  createdAt                 DateTime                @default(now())
  updatedAt                 DateTime                @default(now()) @updatedAt
  deletedAt                 DateTime?
  title                     String
  content                   String?
  publishedAt               DateTime                @default(now())
  viewCount                 Int                     @default(0)
  artist                    Artist?                 @relation(fields: [artistId], references: [id])
  artistId                  Int?
  isDraft                   Boolean                 @default(true)
  isPublic                  Boolean                 @default(false) // is PUblic is different from is Draft. isPublic defined is the post is visible by non-followers
  minimumSubscriptionTierId Int?
  minimumSubscriptionTier   ArtistSubscriptionTier? @relation(fields: [minimumSubscriptionTierId], references: [id])
  hasAnnounceEmailBeenSent  Boolean                 @default(false)
  postSubscriptionTiers     PostSubscriptionTier[]
  notifications             Notification[]
  shouldSendEmail           Boolean                 @default(true)
  images                    PostImage[]             @relation("images")
  featuredImage             PostImage?              @relation(fields: [featuredImageId], references: [id])
  featuredImageId           String?                 @db.Uuid
  postTracks                PostTrack[]
}

model PostImage {
  id              String    @id @default(uuid()) @db.Uuid
  mimeType        String
  extension       String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  deletedAt       DateTime?
  postId          Int
  post            Post      @relation(name: "images", fields: [postId], references: [id])
  featuredForPost Post[]
}

model PostSubscriptionTier {
  postId                   Int
  post                     Post                    @relation(fields: [postId], references: [id])
  artistSubscriptionTierId Int
  artistSubscriptionTier   ArtistSubscriptionTier? @relation(fields: [artistSubscriptionTierId], references: [id])

  @@unique([postId, artistSubscriptionTierId])
}

model Artist {
  id                                 Int                                  @id @default(autoincrement())
  name                               String
  bio                                String?
  user                               User                                 @relation(fields: [userId], references: [id])
  userId                             Int
  posts                              Post[]
  trackGroups                        TrackGroup[]
  enabled                            Boolean                              @default(true)
  createdAt                          DateTime                             @default(now())
  updatedAt                          DateTime                             @default(now()) @updatedAt
  deletedAt                          DateTime?
  subscriptionTiers                  ArtistSubscriptionTier[]
  banner                             ArtistBanner?
  avatar                             ArtistAvatar?
  urlSlug                            String                               @unique
  properties                         Json?
  trackArtists                       TrackArtist[]
  links                              String[] // Legacy, use linksJson instead
  /// [ArtistLink]
  linksJson                          Json[]
  location                           String?
  allowPurchaseEntireCatalog         Boolean                              @default(false)
  purchaseEntireCatalogMinPrice      Int                                  @default(0) // in cents  
  artistUserSubscriptionConfirmation ArtistUserSubscriptionConfirmation[]
  userArtistNotificationSettings     UserArtistNotificationSetting[]
  notifications                      Notification[]
  userArtistTip                      UserArtistTip[]
  artistTipTier                      ArtistTipTier[]
  merchStoreURL                      String?
  merch                              Merch[]
  artistLabels                       ArtistLabel[]
  activityPub                        Boolean                              @default(false)
  ActivityPubArtistFollowers         ActivityPubArtistFollowers[]
}

model ArtistAvatar {
  id               String    @id @default(uuid()) @db.Uuid
  url              String[]
  artist           Artist    @relation(fields: [artistId], references: [id])
  artistId         Int       @unique
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  deletedAt        DateTime?
  originalFilename String?
}

model ArtistBanner {
  id               String    @id @default(uuid()) @db.Uuid
  url              String[]
  artist           Artist    @relation(fields: [artistId], references: [id])
  artistId         Int       @unique
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  deletedAt        DateTime?
  originalFilename String?
}

model ArtistLabel {
  artist      Artist @relation(fields: [artistId], references: [id])
  artistId    Int
  labelUser   User   @relation(fields: [labelUserId], references: [id])
  labelUserId Int

  @@unique([labelUserId, artistId])
}

model ArtistSubscriptionTier {
  id                    Int                      @id @default(autoincrement())
  name                  String
  description           String                   @default("")
  artistId              Int
  artist                Artist                   @relation(fields: [artistId], references: [id])
  minAmount             Int? // in cents
  allowVariable         Boolean?
  maxAmount             Int? // in cents
  defaultAmount         Int? // in cents
  currency              String                   @default("USD")
  userSubscriptions     ArtistUserSubscription[]
  stripeProductKey      String?
  createdAt             DateTime                 @default(now())
  updatedAt             DateTime                 @default(now()) @updatedAt
  deletedAt             DateTime?
  minimumTierForPost    Post[]
  postSubscriptionTiers PostSubscriptionTier[]
  isDefaultTier         Boolean                  @default(false)
  platformPercent       Int?                     @default(7)
  autoPurchaseAlbums    Boolean                  @default(false)
}

model ArtistTipTier {
  id                Int             @id @default(autoincrement())
  name              String
  description       String          @default("")
  artistId          Int
  artist            Artist          @relation(fields: [artistId], references: [id])
  minAmount         Int? // in cents
  allowVariable     Boolean?
  maxAmount         Int? // in cents
  defaultAmount     Int? // in cents
  currency          String          @default("USD")
  userSubscriptions UserArtistTip[]
  stripeProductKey  String?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @default(now()) @updatedAt
  deletedAt         DateTime?
  platformPercent   Int?            @default(7)
}

model ArtistUserSubscription {
  id                           Int                            @id @default(autoincrement())
  artistSubscriptionTierId     Int
  artistSubscriptionTier       ArtistSubscriptionTier         @relation(fields: [artistSubscriptionTierId], references: [id])
  userId                       Int
  user                         User                           @relation(fields: [userId], references: [id])
  amount                       Int // In cents
  currency                     String                         @default("USD")
  stripeSubscriptionKey        String?
  createdAt                    DateTime                       @default(now())
  updatedAt                    DateTime                       @default(now()) @updatedAt
  deletedAt                    DateTime?
  notifications                Notification[]
  artistUserSubscriptionCharge ArtistUserSubscriptionCharge[]

  @@unique([userId, artistSubscriptionTierId])
}

model ArtistUserSubscriptionConfirmation {
  id              String    @id @default(uuid()) @db.Uuid
  email           String
  artistId        Int
  artist          Artist    @relation(fields: [artistId], references: [id])
  token           String    @default(uuid())
  tokenExpiration DateTime? @default(dbgenerated("(NOW() + '06:00:00'::interval)"))

  @@unique([email, artistId])
}

model ArtistUserSubscriptionCharge {
  id                       String                 @id @default(uuid()) @db.Uuid
  artistUserSubscriptionId Int
  artistUserSubscription   ArtistUserSubscription @relation(fields: [artistUserSubscriptionId], references: [id])
  stripeInvoiceId          String? // Stripe Invoice Id
  paymentProcessor         String
  amountPaid               Int // in cents
  currency                 String
  createdAt                DateTime               @default(now())
}

model Merch {
  id                          String                     @id @default(uuid()) @db.Uuid
  title                       String
  description                 String
  minPrice                    Int // In cents
  currency                    String?                    @default("usd")
  quantityRemaining           Int
  startShippingDate           DateTime?
  platformPercent             Int?                       @default(7)
  sku                         String?
  includePurchaseTrackGroupId Int?
  includePurchaseTrackGroup   TrackGroup?                @relation(fields: [includePurchaseTrackGroupId], references: [id])
  isPublic                    Boolean
  itemTypeId                  Int?
  itemType                    MerchItemType?             @relation(fields: [itemTypeId], references: [id])
  createdAt                   DateTime                   @default(now())
  updatedAt                   DateTime                   @default(now()) @updatedAt
  deletedAt                   DateTime?
  artistId                    Int
  artist                      Artist                     @relation(fields: [artistId], references: [id])
  images                      MerchImage[]
  shippingDestinations        MerchShippingDestination[]
  optionTypes                 MerchOptionType[]
  purchases                   MerchPurchase[]
  stripeProductKey            String?
}

model MerchItemType {
  name  String
  id    Int     @id @default(autoincrement())
  merch Merch[]
}

model MerchImage {
  id        String   @id @default(uuid()) @db.Uuid
  merch     Merch    @relation(fields: [merchId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  merchId   String   @db.Uuid
  url       String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model MerchShippingDestination {
  id                 String  @id @default(uuid()) @db.Uuid
  homeCountry        String
  destinationCountry String?
  merch              Merch   @relation(fields: [merchId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  merchId            String  @db.Uuid
  costUnit           Int // in cents
  currency           String
  costExtraUnit      Int // in cents
}

model MerchOptionType {
  id         String        @id @default(uuid()) @db.Uuid
  optionName String // eg. "shirt size"
  merch      Merch         @relation(fields: [merchId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  merchId    String        @db.Uuid
  options    MerchOption[]
}

model MerchOption {
  id                String          @id @default(uuid()) @db.Uuid
  merchOptionTypeId String          @db.Uuid
  merchOptionType   MerchOptionType @relation(fields: [merchOptionTypeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  name              String // eg. "small"
  quantityRemaining Int?
  sku               String?
  additionalPrice   Int?
  purchases         MerchPurchase[]
}

model MerchPurchase {
  id                   String            @id @default(uuid()) @db.Uuid
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @default(now()) @updatedAt
  merch                Merch             @relation(fields: [merchId], references: [id])
  merchId              String            @db.Uuid
  currencyPaid         String
  amountPaid           Int // in cents
  stripeTransactionKey String?
  userId               Int
  quantity             Int
  user                 User              @relation(fields: [userId], references: [id])
  shippingAddress      Json?
  billingAddress       Json?
  fulfillmentStatus    FulfillmentStatus
  options              MerchOption[]
  trackingNumber       String?
  trackingWebsite      String?
}

enum FulfillmentStatus {
  NO_PROGRESS
  STARTED
  SHIPPED
  COMPLETED
}

model UserArtistTip {
  userId           Int
  user             User           @relation(fields: [userId], references: [id])
  artistId         Int
  artist           Artist         @relation(fields: [artistId], references: [id])
  pricePaid        Int // in cents
  currencyPaid     String         @default("USD")
  datePurchased    DateTime       @default(now())
  stripeSessionKey String?
  ArtistTipTier    ArtistTipTier? @relation(fields: [artistTipTierId], references: [id])
  artistTipTierId  Int?
  id               String         @id @default(uuid()) @db.Uuid
}

model UserTrackGroupPurchase {
  userId              Int
  user                User       @relation(fields: [userId], references: [id])
  trackGroupId        Int
  trackGroup          TrackGroup @relation(fields: [trackGroupId], references: [id])
  pricePaid           Int // in cents
  currencyPaid        String     @default("usd")
  datePurchased       DateTime   @default(now())
  stripeSessionKey    String?
  singleDownloadToken String?

  @@unique([userId, trackGroupId])
}

model UserTrackGroupWishlist {
  userId       Int
  user         User       @relation(fields: [userId], references: [id])
  trackGroupId Int
  trackGroup   TrackGroup @relation(fields: [trackGroupId], references: [id])
  createdAt    DateTime   @default(now())

  @@unique([userId, trackGroupId])
}

model TrackGroupDownloadCodes {
  id               String     @id @default(uuid()) @db.Uuid
  trackGroupId     Int
  trackGroup       TrackGroup @relation(fields: [trackGroupId], references: [id])
  downloadCode     String
  group            String
  redeemedByUserId Int?
  redeemedByUser   User?      @relation(fields: [redeemedByUserId], references: [id])
}

model TrackGroup {
  id                      Int                       @id @default(autoincrement())
  about                   String?
  artist                  Artist                    @relation(fields: [artistId], references: [id])
  artistId                Int
  title                   String?
  isDrafts                Boolean                   @default(false)
  tracks                  Track[]
  cover                   TrackGroupCover?
  published               Boolean                   @default(false)
  type                    String?
  releaseDate             DateTime                  @default(now())
  adminEnabled            Boolean                   @default(true)
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
  deletedAt               DateTime?
  minPrice                Int? // in cents
  currency                String?                   @default("usd")
  isPriceFixed            Boolean                   @default(false)
  userTrackGroupPurchases UserTrackGroupPurchase[]
  stripeProductKey        String?
  urlSlug                 String
  credits                 String?
  userTrackGroupWishlist  UserTrackGroupWishlist[]
  platformPercent         Int?                      @default(7)
  tags                    TrackGroupTag[]
  downloadCodes           TrackGroupDownloadCodes[]
  notifications           Notification[]
  merch                   Merch[]
  paymentToUserId         Int?
  paymentToUser           User?                     @relation(fields: [paymentToUserId], references: [id])

  @@unique([artistId, urlSlug])
}

model TrackGroupCover {
  id               String     @id @default(uuid()) @db.Uuid
  url              String[]
  trackGroup       TrackGroup @relation(fields: [trackGroupId], references: [id])
  trackGroupId     Int        @unique
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  deletedAt        DateTime?
  originalFilename String?
}

model Track {
  id           Int           @id @default(autoincrement())
  order        Int           @default(0)
  trackGroup   TrackGroup    @relation(fields: [trackGroupId], references: [id])
  trackGroupId Int
  title        String?
  audio        TrackAudio?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  deletedAt    DateTime?
  isPreview    Boolean       @default(true)
  trackArtists TrackArtist[]
  metadata     Json?
  plays        TrackPlay[]
  license      License?      @relation(fields: [licenseId], references: [id])
  licenseId    Int?
  lyrics       String?
  isrc         String?
  postTracks   PostTrack[]
}

model License {
  id    Int     @id @default(autoincrement())
  short String  @unique
  name  String
  link  String?
  track Track[]
}

model TrackArtist {
  id         String  @id @default(uuid()) @db.Uuid
  trackId    Int
  track      Track   @relation(fields: [trackId], references: [id])
  artistName String?
  artistId   Int?
  artist     Artist? @relation(fields: [artistId], references: [id])
  role       String?
  isCoAuthor Boolean @default(false)
}

model TrackAudio {
  id               String       @id @default(uuid()) @db.Uuid
  url              String?
  track            Track?       @relation(fields: [trackId], references: [id])
  trackId          Int?         @unique
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  deletedAt        DateTime?
  originalFilename String?
  duration         Int? // In seconds
  hash             String?
  size             Int?
  fileExtension    String?
  uploadState      UploadState? @default(STARTED)
}

enum UploadState {
  SUCCESS
  ERROR
  STARTED
}

model TrackPlay {
  id        String   @id @default(uuid()) @db.Uuid
  trackId   Int
  track     Track    @relation(fields: [trackId], references: [id])
  userId    Int?
  user      User?    @relation(fields: [userId], references: [id])
  ip        String?
  createdAt DateTime @default(now())
  owned     Boolean  @default(false)
}

model PostTrack {
  trackId Int
  track   Track @relation(fields: [trackId], references: [id])
  postId  Int
  post    Post  @relation(fields: [postId], references: [id])
  order   Int

  @@unique([trackId, postId])
}

model TrackGroupTag {
  trackGroupId Int
  trackGroup   TrackGroup @relation(fields: [trackGroupId], references: [id])
  tagId        Int
  tag          Tag        @relation(fields: [tagId], references: [id])

  @@unique([trackGroupId, tagId])
}

model Tag {
  id             Int             @id @default(autoincrement())
  tag            String          @unique
  trackGroupTags TrackGroupTag[]
}
