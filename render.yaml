services:
  # A static site
  - type: web
    name: client
    env: static
    buildCommand: corepack enable && yarn install --immutable && yarn client:build && mv client/dist/index.html client/dist/app.html
    staticPublishPath: ./client/dist
    pullRequestPreviewsEnabled: true # optional
    envVars:
      - fromGroup: blackbrd
      - key: SKIP_INSTALL_DEPS
        value: true
    routes:
      - type: rewrite
        source: /*
        destination: /index.html

  # A node web service
  - type: web
    name: api
    env: node
    # env: docker
    repo: https://github.com/funmusicplace/mirlo.git # optional
    region: oregon # optional (defaults to oregon)
    branch: main # optional (defaults to master)
    plan: standard # Supposedly this should be free but
    # dockerCommand: ./start.sh
    # dockerfilePath: ./prod.Dockerfile
    buildCommand: corepack enable && yarn install --immutable && yarn prisma:migrate:deploy && yarn client:build
    startCommand: yarn ts-node src/index.ts
    envVars:
      - key: SKIP_INSTALL_DEPS
        value: true
      - key: NODE_ENV
        value: production
      - key: NODE_OPTIONS
        value: --max-old-space-size=1512
      - key: DATABASE_URL
        fromDatabase:
          name: blackbrd
          property: connectionString
      - fromGroup: blackbrd
      - key: REDIS_HOST
        fromService:
          type: redis
          name: redis
          property: host
      - key: REDIS_PORT
        fromService:
          type: redis
          name: redis
          property: port
      - key: MINIO_ROOT_PASSWORD
        fromService:
          type: web
          name: minio
          envVarKey: MINIO_ROOT_PASSWORD
      - key: MINIO_PORT
        fromService:
          type: web
          name: minio
          envVarKey: PORT
      - key: MINIO_API_PORT
        value: 9000
      - key: MINIO_HOST
        fromService:
          type: web
          name: minio
          property: host

  # A private minIO instance
  - type: web
    name: minio
    env: docker
    autoDeploy: false
    plan: standard
    dockerfilePath: "./minio/Dockerfile"
    envVars:
      - key: MINIO_ROOT_PASSWORD
        generateValue: true # will generate a base64-encoded 256-bit secret
      - fromGroup: blackbrd
      - key: PORT
        value: 9000
    disk:
      name: data
      mountPath: /data
      sizeGB: 600 # optional

  # A worker
  - type: worker
    name: background
    env: docker
    plan: standard # optional (defaults to starter)
    dockerfilePath: ./Dockerfile # optional
    dockerCommand: yarn ts-node src/jobs/queue-worker.ts run
    disk: # this disk gets used to process audio. They should get moved to the
      # minIO service and deleted after upload
      name: data
      mountPath: /data
      sizeGB: 40 # optional
    # dockerContext: ./background/src # optional
    envVars:
      - key: DATABASE_URL
        fromDatabase:
          name: blackbrd
          property: connectionString
      - fromGroup: blackbrd
      - key: REDIS_HOST
        fromService:
          type: redis
          name: redis
          property: host
      - key: REDIS_PORT
        fromService:
          type: redis
          name: redis
          property: port
      - key: MINIO_ROOT_PASSWORD
        fromService:
          type: web
          name: minio
          envVarKey: MINIO_ROOT_PASSWORD
      - key: MINIO_PORT
        fromService:
          type: web
          name: minio
          envVarKey: PORT
      - key: MINIO_HOST
        fromService:
          type: web
          name: minio
          property: host

  - type: cron
    name: every-minute-tasks
    env: node
    repo: https://github.com/funmusicplace/mirlo.git # optional
    plan: starter
    startCommand: yarn ts-node src/jobs/every-minute-tasks.ts
    buildCommand: corepack enable && yarn install --immutable && yarn prisma:migrate:deploy
    schedule: "*/10 * * * *"
    envVars:
      - key: NODE_OPTIONS
        value: --max-old-space-size=512
      - key: DATABASE_URL
        fromDatabase:
          name: blackbrd
          property: connectionString
      - fromGroup: blackbrd
      - key: MINIO_ROOT_PASSWORD
        fromService:
          type: web
          name: minio
          envVarKey: MINIO_ROOT_PASSWORD
      - key: MINIO_PORT
        fromService:
          type: web
          name: minio
          envVarKey: PORT
      - key: REDIS_HOST
        fromService:
          type: redis
          name: redis
          property: host
      - key: REDIS_PORT
        fromService:
          type: redis
          name: redis
          property: port
      - key: MINIO_API_PORT
        value: 9000
      - key: MINIO_HOST
        fromService:
          type: web
          name: minio
          property: host
    branch: main # optional (defaults to master)

  - type: cron
    name: monthly-tasks
    env: node
    repo: https://github.com/funmusicplace/mirlo.git # optional
    plan: starter
    startCommand: yarn ts-node src/jobs/monthly-tasks.ts
    buildCommand: corepack enable && yarn install --immutable && yarn prisma:migrate:deploy
    schedule: "0 0 1 * *"
    envVars:
      - key: NODE_OPTIONS
        value: --max-old-space-size=512
      - key: DATABASE_URL
        fromDatabase:
          name: blackbrd
          property: connectionString
      - fromGroup: blackbrd
    branch: main # optional (defaults to master)

  # A Redis instance
  - type: redis
    name: redis
    ipAllowList: # required
      - source: 0.0.0.0/0
        description: everywhere
    plan: standard # optional (defaults to starter)
    maxmemoryPolicy: noeviction # optional (defaults to allkeys-lru)

databases:
  - name: blackbrd
    plan: standard
    # databaseName: postgres # optional (Render may add a suffix)
    user: blackbrd # optional
  #   ipAllowList: # optional (defaults to allow all)
  #     - source: 203.0.113.4/30
  #       description: office
  #     - source: 198.51.100.1
  #       description: home

  # - name: private database
  #   databaseName: private
  # ipAllowList: [] # only allow internal connections
# envVarGroups:
#   - name: conc-settings
#     envVars:
#       - key: CONCURRENCY
#         value: 2
#       - key: SECRET
#         generateValue: true
#       - key: USER_PROVIDED_SECRET
#         sync: false
#   - name: stripe
#     envVars:
#       - key: STRIPE_API_URL
#         value: https://api.stripe.com/v2
