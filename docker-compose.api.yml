services:
  redis:
    container_name: blackbird-redis
    command:
      - redis-server
      - "--appendonly"
      - "yes"
      - "--requirepass ${REDIS_PASSWORD}"
    image: redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks: [api-network]
    ports:
      - "${REDIS_HOST_PORT:-6379}:${REDIS_PORT:-6379}"

  api:
    container_name: blackbird-api
    env_file:
      - .env
    build:
      context: .
      target: api
    environment:
      - NODE_ENV=${NODE_ENV:-development}

    depends_on:
      - redis
      - pgsql
      - minio
    networks: [api-network]
    ports:
      - "${APP_HOST_PORT:-3000}:3000"
    restart: unless-stopped
    volumes:
      - ${MEDIA_LOCATION:-./data/media/}incoming:/data/media/incoming
      - ${MEDIA_LOCATION:-./data/media/}downloadCache:/data/media/downloadCache
    develop:
      watch:
        - action: sync+restart
          path: ./src
          target: /var/www/api/src
        - action: sync+restart
          path: ./emails
          target: /var/www/api/emails
        - action: rebuild
          path: ./prisma
          target: /var/www/api/prisma
        - action: rebuild
          path: package.json

  background:
    container_name: blackbird-background
    env_file:
      - .env
    build:
      context: .
      target: background
    environment:
      - NODE_ENV=${NODE_ENV:-development}
    depends_on:
      - redis
      - pgsql
      - api
      - minio
    restart: unless-stopped
    networks: [api-network]
    volumes:
      - ${MEDIA_LOCATION:-./data/media/}processing:/data/media/processing
    develop:
      watch:
        - action: sync+restart
          path: ./src
          target: /var/www/api/src
        - action: sync+restart
          path: ./emails
          target: /var/www/api/emails
        - action: rebuild
          path: ./prisma
          target: /var/www/api/prisma
        - action: rebuild
          path: package.json

  minio:
    container_name: blackbird-minio
    image: minio/minio
    networks: [api-network]
    ports:
      - "9000:9000" # API Port
      - "9001:9001" # Web UI Port
    volumes:
      - minio_storage:/data
    env_file: .env
    command: server --console-address ":9001" /data

  pgsql:
    container_name: blackbird-pgsql
    image: postgres:14-alpine
    env_file:
      - .env
    volumes:
      - ./data/pgsql:/var/lib/postgresql/data
      - ./data/pgsql_backups:/backups
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "$POSTGRES_USER"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks: [api-network]
    ports:
      - "${POSTGRES_LOCAL_MACHINE_PORT:-5432}:5432"

networks:
  api-network:
    driver: bridge

volumes:
  minio_storage: {}
